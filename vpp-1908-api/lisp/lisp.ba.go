// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/lisp.api.json

/*
Package lisp is a generated VPP binary API for 'lisp' module.

It consists of:
	  3 types
	 60 messages
	 30 services
*/
package lisp

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "lisp"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x9fc97d38
)

// LispAdjacency represents VPP binary API type 'lisp_adjacency'.
type LispAdjacency struct {
	EidType       uint8
	Reid          []byte `struc:"[16]byte"`
	Leid          []byte `struc:"[16]byte"`
	ReidPrefixLen uint8
	LeidPrefixLen uint8
}

func (*LispAdjacency) GetTypeName() string {
	return "lisp_adjacency"
}

// LocalLocator represents VPP binary API type 'local_locator'.
type LocalLocator struct {
	SwIfIndex uint32
	Priority  uint8
	Weight    uint8
}

func (*LocalLocator) GetTypeName() string {
	return "local_locator"
}

// RemoteLocator represents VPP binary API type 'remote_locator'.
type RemoteLocator struct {
	IsIP4    uint8
	Priority uint8
	Weight   uint8
	Addr     []byte `struc:"[16]byte"`
}

func (*RemoteLocator) GetTypeName() string {
	return "remote_locator"
}

// LispAddDelAdjacency represents VPP binary API message 'lisp_add_del_adjacency'.
type LispAddDelAdjacency struct {
	IsAdd   uint8
	Vni     uint32
	EidType uint8
	Reid    []byte `struc:"[16]byte"`
	Leid    []byte `struc:"[16]byte"`
	ReidLen uint8
	LeidLen uint8
}

func (*LispAddDelAdjacency) GetMessageName() string {
	return "lisp_add_del_adjacency"
}
func (*LispAddDelAdjacency) GetCrcString() string {
	return "f047390d"
}
func (*LispAddDelAdjacency) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelAdjacencyReply represents VPP binary API message 'lisp_add_del_adjacency_reply'.
type LispAddDelAdjacencyReply struct {
	Retval int32
}

func (*LispAddDelAdjacencyReply) GetMessageName() string {
	return "lisp_add_del_adjacency_reply"
}
func (*LispAddDelAdjacencyReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispAddDelAdjacencyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAddDelLocalEid represents VPP binary API message 'lisp_add_del_local_eid'.
type LispAddDelLocalEid struct {
	IsAdd          uint8
	EidType        uint8
	Eid            []byte `struc:"[16]byte"`
	PrefixLen      uint8
	LocatorSetName []byte `struc:"[64]byte"`
	Vni            uint32
	KeyID          uint16
	Key            []byte `struc:"[64]byte"`
}

func (*LispAddDelLocalEid) GetMessageName() string {
	return "lisp_add_del_local_eid"
}
func (*LispAddDelLocalEid) GetCrcString() string {
	return "e6d00717"
}
func (*LispAddDelLocalEid) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelLocalEidReply represents VPP binary API message 'lisp_add_del_local_eid_reply'.
type LispAddDelLocalEidReply struct {
	Retval int32
}

func (*LispAddDelLocalEidReply) GetMessageName() string {
	return "lisp_add_del_local_eid_reply"
}
func (*LispAddDelLocalEidReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispAddDelLocalEidReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAddDelLocator represents VPP binary API message 'lisp_add_del_locator'.
type LispAddDelLocator struct {
	IsAdd          uint8
	LocatorSetName []byte `struc:"[64]byte"`
	SwIfIndex      uint32
	Priority       uint8
	Weight         uint8
}

func (*LispAddDelLocator) GetMessageName() string {
	return "lisp_add_del_locator"
}
func (*LispAddDelLocator) GetCrcString() string {
	return "006a4240"
}
func (*LispAddDelLocator) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelLocatorReply represents VPP binary API message 'lisp_add_del_locator_reply'.
type LispAddDelLocatorReply struct {
	Retval int32
}

func (*LispAddDelLocatorReply) GetMessageName() string {
	return "lisp_add_del_locator_reply"
}
func (*LispAddDelLocatorReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispAddDelLocatorReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAddDelLocatorSet represents VPP binary API message 'lisp_add_del_locator_set'.
type LispAddDelLocatorSet struct {
	IsAdd          uint8
	LocatorSetName []byte `struc:"[64]byte"`
	LocatorNum     uint32 `struc:"sizeof=Locators"`
	Locators       []LocalLocator
}

func (*LispAddDelLocatorSet) GetMessageName() string {
	return "lisp_add_del_locator_set"
}
func (*LispAddDelLocatorSet) GetCrcString() string {
	return "06968e38"
}
func (*LispAddDelLocatorSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelLocatorSetReply represents VPP binary API message 'lisp_add_del_locator_set_reply'.
type LispAddDelLocatorSetReply struct {
	Retval  int32
	LsIndex uint32
}

func (*LispAddDelLocatorSetReply) GetMessageName() string {
	return "lisp_add_del_locator_set_reply"
}
func (*LispAddDelLocatorSetReply) GetCrcString() string {
	return "b6666db4"
}
func (*LispAddDelLocatorSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAddDelMapRequestItrRlocs represents VPP binary API message 'lisp_add_del_map_request_itr_rlocs'.
type LispAddDelMapRequestItrRlocs struct {
	IsAdd          uint8
	LocatorSetName []byte `struc:"[64]byte"`
}

func (*LispAddDelMapRequestItrRlocs) GetMessageName() string {
	return "lisp_add_del_map_request_itr_rlocs"
}
func (*LispAddDelMapRequestItrRlocs) GetCrcString() string {
	return "c7c6cb2f"
}
func (*LispAddDelMapRequestItrRlocs) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelMapRequestItrRlocsReply represents VPP binary API message 'lisp_add_del_map_request_itr_rlocs_reply'.
type LispAddDelMapRequestItrRlocsReply struct {
	Retval int32
}

func (*LispAddDelMapRequestItrRlocsReply) GetMessageName() string {
	return "lisp_add_del_map_request_itr_rlocs_reply"
}
func (*LispAddDelMapRequestItrRlocsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispAddDelMapRequestItrRlocsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAddDelMapResolver represents VPP binary API message 'lisp_add_del_map_resolver'.
type LispAddDelMapResolver struct {
	IsAdd     uint8
	IsIPv6    uint8
	IPAddress []byte `struc:"[16]byte"`
}

func (*LispAddDelMapResolver) GetMessageName() string {
	return "lisp_add_del_map_resolver"
}
func (*LispAddDelMapResolver) GetCrcString() string {
	return "0ebcd37d"
}
func (*LispAddDelMapResolver) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelMapResolverReply represents VPP binary API message 'lisp_add_del_map_resolver_reply'.
type LispAddDelMapResolverReply struct {
	Retval int32
}

func (*LispAddDelMapResolverReply) GetMessageName() string {
	return "lisp_add_del_map_resolver_reply"
}
func (*LispAddDelMapResolverReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispAddDelMapResolverReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAddDelMapServer represents VPP binary API message 'lisp_add_del_map_server'.
type LispAddDelMapServer struct {
	IsAdd     uint8
	IsIPv6    uint8
	IPAddress []byte `struc:"[16]byte"`
}

func (*LispAddDelMapServer) GetMessageName() string {
	return "lisp_add_del_map_server"
}
func (*LispAddDelMapServer) GetCrcString() string {
	return "0ebcd37d"
}
func (*LispAddDelMapServer) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelMapServerReply represents VPP binary API message 'lisp_add_del_map_server_reply'.
type LispAddDelMapServerReply struct {
	Retval int32
}

func (*LispAddDelMapServerReply) GetMessageName() string {
	return "lisp_add_del_map_server_reply"
}
func (*LispAddDelMapServerReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispAddDelMapServerReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAddDelRemoteMapping represents VPP binary API message 'lisp_add_del_remote_mapping'.
type LispAddDelRemoteMapping struct {
	IsAdd    uint8
	IsSrcDst uint8
	DelAll   uint8
	Vni      uint32
	Action   uint8
	EidType  uint8
	Eid      []byte `struc:"[16]byte"`
	EidLen   uint8
	Seid     []byte `struc:"[16]byte"`
	SeidLen  uint8
	RlocNum  uint32 `struc:"sizeof=Rlocs"`
	Rlocs    []RemoteLocator
}

func (*LispAddDelRemoteMapping) GetMessageName() string {
	return "lisp_add_del_remote_mapping"
}
func (*LispAddDelRemoteMapping) GetCrcString() string {
	return "b879c3a9"
}
func (*LispAddDelRemoteMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAddDelRemoteMappingReply represents VPP binary API message 'lisp_add_del_remote_mapping_reply'.
type LispAddDelRemoteMappingReply struct {
	Retval int32
}

func (*LispAddDelRemoteMappingReply) GetMessageName() string {
	return "lisp_add_del_remote_mapping_reply"
}
func (*LispAddDelRemoteMappingReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispAddDelRemoteMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispAdjacenciesGet represents VPP binary API message 'lisp_adjacencies_get'.
type LispAdjacenciesGet struct {
	Vni uint32
}

func (*LispAdjacenciesGet) GetMessageName() string {
	return "lisp_adjacencies_get"
}
func (*LispAdjacenciesGet) GetCrcString() string {
	return "8d1f2fe9"
}
func (*LispAdjacenciesGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispAdjacenciesGetReply represents VPP binary API message 'lisp_adjacencies_get_reply'.
type LispAdjacenciesGetReply struct {
	Retval      int32
	Count       uint32 `struc:"sizeof=Adjacencies"`
	Adjacencies []LispAdjacency
}

func (*LispAdjacenciesGetReply) GetMessageName() string {
	return "lisp_adjacencies_get_reply"
}
func (*LispAdjacenciesGetReply) GetCrcString() string {
	return "ada0f464"
}
func (*LispAdjacenciesGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispEidTableAddDelMap represents VPP binary API message 'lisp_eid_table_add_del_map'.
type LispEidTableAddDelMap struct {
	IsAdd   uint8
	Vni     uint32
	DpTable uint32
	IsL2    uint8
}

func (*LispEidTableAddDelMap) GetMessageName() string {
	return "lisp_eid_table_add_del_map"
}
func (*LispEidTableAddDelMap) GetCrcString() string {
	return "59e9975e"
}
func (*LispEidTableAddDelMap) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispEidTableAddDelMapReply represents VPP binary API message 'lisp_eid_table_add_del_map_reply'.
type LispEidTableAddDelMapReply struct {
	Retval int32
}

func (*LispEidTableAddDelMapReply) GetMessageName() string {
	return "lisp_eid_table_add_del_map_reply"
}
func (*LispEidTableAddDelMapReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispEidTableAddDelMapReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispEidTableDetails represents VPP binary API message 'lisp_eid_table_details'.
type LispEidTableDetails struct {
	LocatorSetIndex uint32
	Action          uint8
	IsLocal         uint8
	EidType         uint8
	IsSrcDst        uint8
	Vni             uint32
	Eid             []byte `struc:"[16]byte"`
	EidPrefixLen    uint8
	Seid            []byte `struc:"[16]byte"`
	SeidPrefixLen   uint8
	TTL             uint32
	Authoritative   uint8
	KeyID           uint16
	Key             []byte `struc:"[64]byte"`
}

func (*LispEidTableDetails) GetMessageName() string {
	return "lisp_eid_table_details"
}
func (*LispEidTableDetails) GetCrcString() string {
	return "dcd9f414"
}
func (*LispEidTableDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispEidTableDump represents VPP binary API message 'lisp_eid_table_dump'.
type LispEidTableDump struct {
	EidSet       uint8
	PrefixLength uint8
	Vni          uint32
	EidType      uint8
	Eid          []byte `struc:"[16]byte"`
	Filter       uint8
}

func (*LispEidTableDump) GetMessageName() string {
	return "lisp_eid_table_dump"
}
func (*LispEidTableDump) GetCrcString() string {
	return "e0df64da"
}
func (*LispEidTableDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispEidTableMapDetails represents VPP binary API message 'lisp_eid_table_map_details'.
type LispEidTableMapDetails struct {
	Vni     uint32
	DpTable uint32
}

func (*LispEidTableMapDetails) GetMessageName() string {
	return "lisp_eid_table_map_details"
}
func (*LispEidTableMapDetails) GetCrcString() string {
	return "0b6859e2"
}
func (*LispEidTableMapDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispEidTableMapDump represents VPP binary API message 'lisp_eid_table_map_dump'.
type LispEidTableMapDump struct {
	IsL2 uint8
}

func (*LispEidTableMapDump) GetMessageName() string {
	return "lisp_eid_table_map_dump"
}
func (*LispEidTableMapDump) GetCrcString() string {
	return "67c54650"
}
func (*LispEidTableMapDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispEidTableVniDetails represents VPP binary API message 'lisp_eid_table_vni_details'.
type LispEidTableVniDetails struct {
	Vni uint32
}

func (*LispEidTableVniDetails) GetMessageName() string {
	return "lisp_eid_table_vni_details"
}
func (*LispEidTableVniDetails) GetCrcString() string {
	return "64abc01e"
}
func (*LispEidTableVniDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispEidTableVniDump represents VPP binary API message 'lisp_eid_table_vni_dump'.
type LispEidTableVniDump struct{}

func (*LispEidTableVniDump) GetMessageName() string {
	return "lisp_eid_table_vni_dump"
}
func (*LispEidTableVniDump) GetCrcString() string {
	return "51077d14"
}
func (*LispEidTableVniDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispEnableDisable represents VPP binary API message 'lisp_enable_disable'.
type LispEnableDisable struct {
	IsEn uint8
}

func (*LispEnableDisable) GetMessageName() string {
	return "lisp_enable_disable"
}
func (*LispEnableDisable) GetCrcString() string {
	return "eb0e943b"
}
func (*LispEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispEnableDisableReply represents VPP binary API message 'lisp_enable_disable_reply'.
type LispEnableDisableReply struct {
	Retval int32
}

func (*LispEnableDisableReply) GetMessageName() string {
	return "lisp_enable_disable_reply"
}
func (*LispEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispGetMapRequestItrRlocs represents VPP binary API message 'lisp_get_map_request_itr_rlocs'.
type LispGetMapRequestItrRlocs struct{}

func (*LispGetMapRequestItrRlocs) GetMessageName() string {
	return "lisp_get_map_request_itr_rlocs"
}
func (*LispGetMapRequestItrRlocs) GetCrcString() string {
	return "51077d14"
}
func (*LispGetMapRequestItrRlocs) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispGetMapRequestItrRlocsReply represents VPP binary API message 'lisp_get_map_request_itr_rlocs_reply'.
type LispGetMapRequestItrRlocsReply struct {
	Retval         int32
	LocatorSetName []byte `struc:"[64]byte"`
}

func (*LispGetMapRequestItrRlocsReply) GetMessageName() string {
	return "lisp_get_map_request_itr_rlocs_reply"
}
func (*LispGetMapRequestItrRlocsReply) GetCrcString() string {
	return "9f56f6f7"
}
func (*LispGetMapRequestItrRlocsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispLocatorDetails represents VPP binary API message 'lisp_locator_details'.
type LispLocatorDetails struct {
	Local     uint8
	SwIfIndex uint32
	IsIPv6    uint8
	IPAddress []byte `struc:"[16]byte"`
	Priority  uint8
	Weight    uint8
}

func (*LispLocatorDetails) GetMessageName() string {
	return "lisp_locator_details"
}
func (*LispLocatorDetails) GetCrcString() string {
	return "b3988a30"
}
func (*LispLocatorDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispLocatorDump represents VPP binary API message 'lisp_locator_dump'.
type LispLocatorDump struct {
	LsIndex    uint32
	LsName     []byte `struc:"[64]byte"`
	IsIndexSet uint8
}

func (*LispLocatorDump) GetMessageName() string {
	return "lisp_locator_dump"
}
func (*LispLocatorDump) GetCrcString() string {
	return "f27d5050"
}
func (*LispLocatorDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispLocatorSetDetails represents VPP binary API message 'lisp_locator_set_details'.
type LispLocatorSetDetails struct {
	LsIndex uint32
	LsName  []byte `struc:"[64]byte"`
}

func (*LispLocatorSetDetails) GetMessageName() string {
	return "lisp_locator_set_details"
}
func (*LispLocatorSetDetails) GetCrcString() string {
	return "6b846882"
}
func (*LispLocatorSetDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispLocatorSetDump represents VPP binary API message 'lisp_locator_set_dump'.
type LispLocatorSetDump struct {
	Filter uint8
}

func (*LispLocatorSetDump) GetMessageName() string {
	return "lisp_locator_set_dump"
}
func (*LispLocatorSetDump) GetCrcString() string {
	return "c79e8ab0"
}
func (*LispLocatorSetDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispMapRegisterEnableDisable represents VPP binary API message 'lisp_map_register_enable_disable'.
type LispMapRegisterEnableDisable struct {
	IsEnabled uint8
}

func (*LispMapRegisterEnableDisable) GetMessageName() string {
	return "lisp_map_register_enable_disable"
}
func (*LispMapRegisterEnableDisable) GetCrcString() string {
	return "294103d1"
}
func (*LispMapRegisterEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispMapRegisterEnableDisableReply represents VPP binary API message 'lisp_map_register_enable_disable_reply'.
type LispMapRegisterEnableDisableReply struct {
	Retval int32
}

func (*LispMapRegisterEnableDisableReply) GetMessageName() string {
	return "lisp_map_register_enable_disable_reply"
}
func (*LispMapRegisterEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispMapRegisterEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispMapRequestMode represents VPP binary API message 'lisp_map_request_mode'.
type LispMapRequestMode struct {
	Mode uint8
}

func (*LispMapRequestMode) GetMessageName() string {
	return "lisp_map_request_mode"
}
func (*LispMapRequestMode) GetCrcString() string {
	return "f3f93ce9"
}
func (*LispMapRequestMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispMapRequestModeReply represents VPP binary API message 'lisp_map_request_mode_reply'.
type LispMapRequestModeReply struct {
	Retval int32
}

func (*LispMapRequestModeReply) GetMessageName() string {
	return "lisp_map_request_mode_reply"
}
func (*LispMapRequestModeReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispMapRequestModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispMapResolverDetails represents VPP binary API message 'lisp_map_resolver_details'.
type LispMapResolverDetails struct {
	IsIPv6    uint8
	IPAddress []byte `struc:"[16]byte"`
}

func (*LispMapResolverDetails) GetMessageName() string {
	return "lisp_map_resolver_details"
}
func (*LispMapResolverDetails) GetCrcString() string {
	return "60a5f5ca"
}
func (*LispMapResolverDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispMapResolverDump represents VPP binary API message 'lisp_map_resolver_dump'.
type LispMapResolverDump struct{}

func (*LispMapResolverDump) GetMessageName() string {
	return "lisp_map_resolver_dump"
}
func (*LispMapResolverDump) GetCrcString() string {
	return "51077d14"
}
func (*LispMapResolverDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispMapServerDetails represents VPP binary API message 'lisp_map_server_details'.
type LispMapServerDetails struct {
	IsIPv6    uint8
	IPAddress []byte `struc:"[16]byte"`
}

func (*LispMapServerDetails) GetMessageName() string {
	return "lisp_map_server_details"
}
func (*LispMapServerDetails) GetCrcString() string {
	return "60a5f5ca"
}
func (*LispMapServerDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispMapServerDump represents VPP binary API message 'lisp_map_server_dump'.
type LispMapServerDump struct{}

func (*LispMapServerDump) GetMessageName() string {
	return "lisp_map_server_dump"
}
func (*LispMapServerDump) GetCrcString() string {
	return "51077d14"
}
func (*LispMapServerDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispPitrSetLocatorSet represents VPP binary API message 'lisp_pitr_set_locator_set'.
type LispPitrSetLocatorSet struct {
	IsAdd  uint8
	LsName []byte `struc:"[64]byte"`
}

func (*LispPitrSetLocatorSet) GetMessageName() string {
	return "lisp_pitr_set_locator_set"
}
func (*LispPitrSetLocatorSet) GetCrcString() string {
	return "7aa022dd"
}
func (*LispPitrSetLocatorSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispPitrSetLocatorSetReply represents VPP binary API message 'lisp_pitr_set_locator_set_reply'.
type LispPitrSetLocatorSetReply struct {
	Retval int32
}

func (*LispPitrSetLocatorSetReply) GetMessageName() string {
	return "lisp_pitr_set_locator_set_reply"
}
func (*LispPitrSetLocatorSetReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispPitrSetLocatorSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispRlocProbeEnableDisable represents VPP binary API message 'lisp_rloc_probe_enable_disable'.
type LispRlocProbeEnableDisable struct {
	IsEnabled uint8
}

func (*LispRlocProbeEnableDisable) GetMessageName() string {
	return "lisp_rloc_probe_enable_disable"
}
func (*LispRlocProbeEnableDisable) GetCrcString() string {
	return "294103d1"
}
func (*LispRlocProbeEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispRlocProbeEnableDisableReply represents VPP binary API message 'lisp_rloc_probe_enable_disable_reply'.
type LispRlocProbeEnableDisableReply struct {
	Retval int32
}

func (*LispRlocProbeEnableDisableReply) GetMessageName() string {
	return "lisp_rloc_probe_enable_disable_reply"
}
func (*LispRlocProbeEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispRlocProbeEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// LispUsePetr represents VPP binary API message 'lisp_use_petr'.
type LispUsePetr struct {
	IsIP4   uint8
	Address []byte `struc:"[16]byte"`
	IsAdd   uint8
}

func (*LispUsePetr) GetMessageName() string {
	return "lisp_use_petr"
}
func (*LispUsePetr) GetCrcString() string {
	return "6910787d"
}
func (*LispUsePetr) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// LispUsePetrReply represents VPP binary API message 'lisp_use_petr_reply'.
type LispUsePetrReply struct {
	Retval int32
}

func (*LispUsePetrReply) GetMessageName() string {
	return "lisp_use_petr_reply"
}
func (*LispUsePetrReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LispUsePetrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// ShowLispMapRegisterState represents VPP binary API message 'show_lisp_map_register_state'.
type ShowLispMapRegisterState struct{}

func (*ShowLispMapRegisterState) GetMessageName() string {
	return "show_lisp_map_register_state"
}
func (*ShowLispMapRegisterState) GetCrcString() string {
	return "51077d14"
}
func (*ShowLispMapRegisterState) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// ShowLispMapRegisterStateReply represents VPP binary API message 'show_lisp_map_register_state_reply'.
type ShowLispMapRegisterStateReply struct {
	Retval    int32
	IsEnabled uint8
}

func (*ShowLispMapRegisterStateReply) GetMessageName() string {
	return "show_lisp_map_register_state_reply"
}
func (*ShowLispMapRegisterStateReply) GetCrcString() string {
	return "14304fbc"
}
func (*ShowLispMapRegisterStateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// ShowLispMapRequestMode represents VPP binary API message 'show_lisp_map_request_mode'.
type ShowLispMapRequestMode struct{}

func (*ShowLispMapRequestMode) GetMessageName() string {
	return "show_lisp_map_request_mode"
}
func (*ShowLispMapRequestMode) GetCrcString() string {
	return "51077d14"
}
func (*ShowLispMapRequestMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// ShowLispMapRequestModeReply represents VPP binary API message 'show_lisp_map_request_mode_reply'.
type ShowLispMapRequestModeReply struct {
	Retval int32
	Mode   uint8
}

func (*ShowLispMapRequestModeReply) GetMessageName() string {
	return "show_lisp_map_request_mode_reply"
}
func (*ShowLispMapRequestModeReply) GetCrcString() string {
	return "d423107c"
}
func (*ShowLispMapRequestModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// ShowLispPitr represents VPP binary API message 'show_lisp_pitr'.
type ShowLispPitr struct{}

func (*ShowLispPitr) GetMessageName() string {
	return "show_lisp_pitr"
}
func (*ShowLispPitr) GetCrcString() string {
	return "51077d14"
}
func (*ShowLispPitr) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// ShowLispPitrReply represents VPP binary API message 'show_lisp_pitr_reply'.
type ShowLispPitrReply struct {
	Retval         int32
	Status         uint8
	LocatorSetName []byte `struc:"[64]byte"`
}

func (*ShowLispPitrReply) GetMessageName() string {
	return "show_lisp_pitr_reply"
}
func (*ShowLispPitrReply) GetCrcString() string {
	return "dca512cc"
}
func (*ShowLispPitrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// ShowLispRlocProbeState represents VPP binary API message 'show_lisp_rloc_probe_state'.
type ShowLispRlocProbeState struct{}

func (*ShowLispRlocProbeState) GetMessageName() string {
	return "show_lisp_rloc_probe_state"
}
func (*ShowLispRlocProbeState) GetCrcString() string {
	return "51077d14"
}
func (*ShowLispRlocProbeState) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// ShowLispRlocProbeStateReply represents VPP binary API message 'show_lisp_rloc_probe_state_reply'.
type ShowLispRlocProbeStateReply struct {
	Retval    int32
	IsEnabled uint8
}

func (*ShowLispRlocProbeStateReply) GetMessageName() string {
	return "show_lisp_rloc_probe_state_reply"
}
func (*ShowLispRlocProbeStateReply) GetCrcString() string {
	return "14304fbc"
}
func (*ShowLispRlocProbeStateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// ShowLispStatus represents VPP binary API message 'show_lisp_status'.
type ShowLispStatus struct{}

func (*ShowLispStatus) GetMessageName() string {
	return "show_lisp_status"
}
func (*ShowLispStatus) GetCrcString() string {
	return "51077d14"
}
func (*ShowLispStatus) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// ShowLispStatusReply represents VPP binary API message 'show_lisp_status_reply'.
type ShowLispStatusReply struct {
	Retval        int32
	FeatureStatus uint8
	GpeStatus     uint8
}

func (*ShowLispStatusReply) GetMessageName() string {
	return "show_lisp_status_reply"
}
func (*ShowLispStatusReply) GetCrcString() string {
	return "ddcf48ef"
}
func (*ShowLispStatusReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// ShowLispUsePetr represents VPP binary API message 'show_lisp_use_petr'.
type ShowLispUsePetr struct{}

func (*ShowLispUsePetr) GetMessageName() string {
	return "show_lisp_use_petr"
}
func (*ShowLispUsePetr) GetCrcString() string {
	return "51077d14"
}
func (*ShowLispUsePetr) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// ShowLispUsePetrReply represents VPP binary API message 'show_lisp_use_petr_reply'.
type ShowLispUsePetrReply struct {
	Retval  int32
	Status  uint8
	IsIP4   uint8
	Address []byte `struc:"[16]byte"`
}

func (*ShowLispUsePetrReply) GetMessageName() string {
	return "show_lisp_use_petr_reply"
}
func (*ShowLispUsePetrReply) GetCrcString() string {
	return "1eb21916"
}
func (*ShowLispUsePetrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*LispAddDelAdjacency)(nil), "lisp.LispAddDelAdjacency")
	api.RegisterMessage((*LispAddDelAdjacencyReply)(nil), "lisp.LispAddDelAdjacencyReply")
	api.RegisterMessage((*LispAddDelLocalEid)(nil), "lisp.LispAddDelLocalEid")
	api.RegisterMessage((*LispAddDelLocalEidReply)(nil), "lisp.LispAddDelLocalEidReply")
	api.RegisterMessage((*LispAddDelLocator)(nil), "lisp.LispAddDelLocator")
	api.RegisterMessage((*LispAddDelLocatorReply)(nil), "lisp.LispAddDelLocatorReply")
	api.RegisterMessage((*LispAddDelLocatorSet)(nil), "lisp.LispAddDelLocatorSet")
	api.RegisterMessage((*LispAddDelLocatorSetReply)(nil), "lisp.LispAddDelLocatorSetReply")
	api.RegisterMessage((*LispAddDelMapRequestItrRlocs)(nil), "lisp.LispAddDelMapRequestItrRlocs")
	api.RegisterMessage((*LispAddDelMapRequestItrRlocsReply)(nil), "lisp.LispAddDelMapRequestItrRlocsReply")
	api.RegisterMessage((*LispAddDelMapResolver)(nil), "lisp.LispAddDelMapResolver")
	api.RegisterMessage((*LispAddDelMapResolverReply)(nil), "lisp.LispAddDelMapResolverReply")
	api.RegisterMessage((*LispAddDelMapServer)(nil), "lisp.LispAddDelMapServer")
	api.RegisterMessage((*LispAddDelMapServerReply)(nil), "lisp.LispAddDelMapServerReply")
	api.RegisterMessage((*LispAddDelRemoteMapping)(nil), "lisp.LispAddDelRemoteMapping")
	api.RegisterMessage((*LispAddDelRemoteMappingReply)(nil), "lisp.LispAddDelRemoteMappingReply")
	api.RegisterMessage((*LispAdjacenciesGet)(nil), "lisp.LispAdjacenciesGet")
	api.RegisterMessage((*LispAdjacenciesGetReply)(nil), "lisp.LispAdjacenciesGetReply")
	api.RegisterMessage((*LispEidTableAddDelMap)(nil), "lisp.LispEidTableAddDelMap")
	api.RegisterMessage((*LispEidTableAddDelMapReply)(nil), "lisp.LispEidTableAddDelMapReply")
	api.RegisterMessage((*LispEidTableDetails)(nil), "lisp.LispEidTableDetails")
	api.RegisterMessage((*LispEidTableDump)(nil), "lisp.LispEidTableDump")
	api.RegisterMessage((*LispEidTableMapDetails)(nil), "lisp.LispEidTableMapDetails")
	api.RegisterMessage((*LispEidTableMapDump)(nil), "lisp.LispEidTableMapDump")
	api.RegisterMessage((*LispEidTableVniDetails)(nil), "lisp.LispEidTableVniDetails")
	api.RegisterMessage((*LispEidTableVniDump)(nil), "lisp.LispEidTableVniDump")
	api.RegisterMessage((*LispEnableDisable)(nil), "lisp.LispEnableDisable")
	api.RegisterMessage((*LispEnableDisableReply)(nil), "lisp.LispEnableDisableReply")
	api.RegisterMessage((*LispGetMapRequestItrRlocs)(nil), "lisp.LispGetMapRequestItrRlocs")
	api.RegisterMessage((*LispGetMapRequestItrRlocsReply)(nil), "lisp.LispGetMapRequestItrRlocsReply")
	api.RegisterMessage((*LispLocatorDetails)(nil), "lisp.LispLocatorDetails")
	api.RegisterMessage((*LispLocatorDump)(nil), "lisp.LispLocatorDump")
	api.RegisterMessage((*LispLocatorSetDetails)(nil), "lisp.LispLocatorSetDetails")
	api.RegisterMessage((*LispLocatorSetDump)(nil), "lisp.LispLocatorSetDump")
	api.RegisterMessage((*LispMapRegisterEnableDisable)(nil), "lisp.LispMapRegisterEnableDisable")
	api.RegisterMessage((*LispMapRegisterEnableDisableReply)(nil), "lisp.LispMapRegisterEnableDisableReply")
	api.RegisterMessage((*LispMapRequestMode)(nil), "lisp.LispMapRequestMode")
	api.RegisterMessage((*LispMapRequestModeReply)(nil), "lisp.LispMapRequestModeReply")
	api.RegisterMessage((*LispMapResolverDetails)(nil), "lisp.LispMapResolverDetails")
	api.RegisterMessage((*LispMapResolverDump)(nil), "lisp.LispMapResolverDump")
	api.RegisterMessage((*LispMapServerDetails)(nil), "lisp.LispMapServerDetails")
	api.RegisterMessage((*LispMapServerDump)(nil), "lisp.LispMapServerDump")
	api.RegisterMessage((*LispPitrSetLocatorSet)(nil), "lisp.LispPitrSetLocatorSet")
	api.RegisterMessage((*LispPitrSetLocatorSetReply)(nil), "lisp.LispPitrSetLocatorSetReply")
	api.RegisterMessage((*LispRlocProbeEnableDisable)(nil), "lisp.LispRlocProbeEnableDisable")
	api.RegisterMessage((*LispRlocProbeEnableDisableReply)(nil), "lisp.LispRlocProbeEnableDisableReply")
	api.RegisterMessage((*LispUsePetr)(nil), "lisp.LispUsePetr")
	api.RegisterMessage((*LispUsePetrReply)(nil), "lisp.LispUsePetrReply")
	api.RegisterMessage((*ShowLispMapRegisterState)(nil), "lisp.ShowLispMapRegisterState")
	api.RegisterMessage((*ShowLispMapRegisterStateReply)(nil), "lisp.ShowLispMapRegisterStateReply")
	api.RegisterMessage((*ShowLispMapRequestMode)(nil), "lisp.ShowLispMapRequestMode")
	api.RegisterMessage((*ShowLispMapRequestModeReply)(nil), "lisp.ShowLispMapRequestModeReply")
	api.RegisterMessage((*ShowLispPitr)(nil), "lisp.ShowLispPitr")
	api.RegisterMessage((*ShowLispPitrReply)(nil), "lisp.ShowLispPitrReply")
	api.RegisterMessage((*ShowLispRlocProbeState)(nil), "lisp.ShowLispRlocProbeState")
	api.RegisterMessage((*ShowLispRlocProbeStateReply)(nil), "lisp.ShowLispRlocProbeStateReply")
	api.RegisterMessage((*ShowLispStatus)(nil), "lisp.ShowLispStatus")
	api.RegisterMessage((*ShowLispStatusReply)(nil), "lisp.ShowLispStatusReply")
	api.RegisterMessage((*ShowLispUsePetr)(nil), "lisp.ShowLispUsePetr")
	api.RegisterMessage((*ShowLispUsePetrReply)(nil), "lisp.ShowLispUsePetrReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*LispAddDelAdjacency)(nil),
		(*LispAddDelAdjacencyReply)(nil),
		(*LispAddDelLocalEid)(nil),
		(*LispAddDelLocalEidReply)(nil),
		(*LispAddDelLocator)(nil),
		(*LispAddDelLocatorReply)(nil),
		(*LispAddDelLocatorSet)(nil),
		(*LispAddDelLocatorSetReply)(nil),
		(*LispAddDelMapRequestItrRlocs)(nil),
		(*LispAddDelMapRequestItrRlocsReply)(nil),
		(*LispAddDelMapResolver)(nil),
		(*LispAddDelMapResolverReply)(nil),
		(*LispAddDelMapServer)(nil),
		(*LispAddDelMapServerReply)(nil),
		(*LispAddDelRemoteMapping)(nil),
		(*LispAddDelRemoteMappingReply)(nil),
		(*LispAdjacenciesGet)(nil),
		(*LispAdjacenciesGetReply)(nil),
		(*LispEidTableAddDelMap)(nil),
		(*LispEidTableAddDelMapReply)(nil),
		(*LispEidTableDetails)(nil),
		(*LispEidTableDump)(nil),
		(*LispEidTableMapDetails)(nil),
		(*LispEidTableMapDump)(nil),
		(*LispEidTableVniDetails)(nil),
		(*LispEidTableVniDump)(nil),
		(*LispEnableDisable)(nil),
		(*LispEnableDisableReply)(nil),
		(*LispGetMapRequestItrRlocs)(nil),
		(*LispGetMapRequestItrRlocsReply)(nil),
		(*LispLocatorDetails)(nil),
		(*LispLocatorDump)(nil),
		(*LispLocatorSetDetails)(nil),
		(*LispLocatorSetDump)(nil),
		(*LispMapRegisterEnableDisable)(nil),
		(*LispMapRegisterEnableDisableReply)(nil),
		(*LispMapRequestMode)(nil),
		(*LispMapRequestModeReply)(nil),
		(*LispMapResolverDetails)(nil),
		(*LispMapResolverDump)(nil),
		(*LispMapServerDetails)(nil),
		(*LispMapServerDump)(nil),
		(*LispPitrSetLocatorSet)(nil),
		(*LispPitrSetLocatorSetReply)(nil),
		(*LispRlocProbeEnableDisable)(nil),
		(*LispRlocProbeEnableDisableReply)(nil),
		(*LispUsePetr)(nil),
		(*LispUsePetrReply)(nil),
		(*ShowLispMapRegisterState)(nil),
		(*ShowLispMapRegisterStateReply)(nil),
		(*ShowLispMapRequestMode)(nil),
		(*ShowLispMapRequestModeReply)(nil),
		(*ShowLispPitr)(nil),
		(*ShowLispPitrReply)(nil),
		(*ShowLispRlocProbeState)(nil),
		(*ShowLispRlocProbeStateReply)(nil),
		(*ShowLispStatus)(nil),
		(*ShowLispStatusReply)(nil),
		(*ShowLispUsePetr)(nil),
		(*ShowLispUsePetrReply)(nil),
	}
}

// RPCService represents RPC service API for lisp module.
type RPCService interface {
	DumpLispEidTable(ctx context.Context, in *LispEidTableDump) (RPCService_DumpLispEidTableClient, error)
	DumpLispEidTableMap(ctx context.Context, in *LispEidTableMapDump) (RPCService_DumpLispEidTableMapClient, error)
	DumpLispEidTableVni(ctx context.Context, in *LispEidTableVniDump) (RPCService_DumpLispEidTableVniClient, error)
	DumpLispLocator(ctx context.Context, in *LispLocatorDump) (RPCService_DumpLispLocatorClient, error)
	DumpLispLocatorSet(ctx context.Context, in *LispLocatorSetDump) (RPCService_DumpLispLocatorSetClient, error)
	DumpLispMapResolver(ctx context.Context, in *LispMapResolverDump) (RPCService_DumpLispMapResolverClient, error)
	DumpLispMapServer(ctx context.Context, in *LispMapServerDump) (RPCService_DumpLispMapServerClient, error)
	LispAddDelAdjacency(ctx context.Context, in *LispAddDelAdjacency) (*LispAddDelAdjacencyReply, error)
	LispAddDelLocalEid(ctx context.Context, in *LispAddDelLocalEid) (*LispAddDelLocalEidReply, error)
	LispAddDelLocator(ctx context.Context, in *LispAddDelLocator) (*LispAddDelLocatorReply, error)
	LispAddDelLocatorSet(ctx context.Context, in *LispAddDelLocatorSet) (*LispAddDelLocatorSetReply, error)
	LispAddDelMapRequestItrRlocs(ctx context.Context, in *LispAddDelMapRequestItrRlocs) (*LispAddDelMapRequestItrRlocsReply, error)
	LispAddDelMapResolver(ctx context.Context, in *LispAddDelMapResolver) (*LispAddDelMapResolverReply, error)
	LispAddDelMapServer(ctx context.Context, in *LispAddDelMapServer) (*LispAddDelMapServerReply, error)
	LispAddDelRemoteMapping(ctx context.Context, in *LispAddDelRemoteMapping) (*LispAddDelRemoteMappingReply, error)
	LispAdjacenciesGet(ctx context.Context, in *LispAdjacenciesGet) (*LispAdjacenciesGetReply, error)
	LispEidTableAddDelMap(ctx context.Context, in *LispEidTableAddDelMap) (*LispEidTableAddDelMapReply, error)
	LispEnableDisable(ctx context.Context, in *LispEnableDisable) (*LispEnableDisableReply, error)
	LispGetMapRequestItrRlocs(ctx context.Context, in *LispGetMapRequestItrRlocs) (*LispGetMapRequestItrRlocsReply, error)
	LispMapRegisterEnableDisable(ctx context.Context, in *LispMapRegisterEnableDisable) (*LispMapRegisterEnableDisableReply, error)
	LispMapRequestMode(ctx context.Context, in *LispMapRequestMode) (*LispMapRequestModeReply, error)
	LispPitrSetLocatorSet(ctx context.Context, in *LispPitrSetLocatorSet) (*LispPitrSetLocatorSetReply, error)
	LispRlocProbeEnableDisable(ctx context.Context, in *LispRlocProbeEnableDisable) (*LispRlocProbeEnableDisableReply, error)
	LispUsePetr(ctx context.Context, in *LispUsePetr) (*LispUsePetrReply, error)
	ShowLispMapRegisterState(ctx context.Context, in *ShowLispMapRegisterState) (*ShowLispMapRegisterStateReply, error)
	ShowLispMapRequestMode(ctx context.Context, in *ShowLispMapRequestMode) (*ShowLispMapRequestModeReply, error)
	ShowLispPitr(ctx context.Context, in *ShowLispPitr) (*ShowLispPitrReply, error)
	ShowLispRlocProbeState(ctx context.Context, in *ShowLispRlocProbeState) (*ShowLispRlocProbeStateReply, error)
	ShowLispStatus(ctx context.Context, in *ShowLispStatus) (*ShowLispStatusReply, error)
	ShowLispUsePetr(ctx context.Context, in *ShowLispUsePetr) (*ShowLispUsePetrReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpLispEidTable(ctx context.Context, in *LispEidTableDump) (RPCService_DumpLispEidTableClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispEidTableClient{stream}
	return x, nil
}

type RPCService_DumpLispEidTableClient interface {
	Recv() (*LispEidTableDetails, error)
}

type serviceClient_DumpLispEidTableClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispEidTableClient) Recv() (*LispEidTableDetails, error) {
	m := new(LispEidTableDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispEidTableMap(ctx context.Context, in *LispEidTableMapDump) (RPCService_DumpLispEidTableMapClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispEidTableMapClient{stream}
	return x, nil
}

type RPCService_DumpLispEidTableMapClient interface {
	Recv() (*LispEidTableMapDetails, error)
}

type serviceClient_DumpLispEidTableMapClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispEidTableMapClient) Recv() (*LispEidTableMapDetails, error) {
	m := new(LispEidTableMapDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispEidTableVni(ctx context.Context, in *LispEidTableVniDump) (RPCService_DumpLispEidTableVniClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispEidTableVniClient{stream}
	return x, nil
}

type RPCService_DumpLispEidTableVniClient interface {
	Recv() (*LispEidTableVniDetails, error)
}

type serviceClient_DumpLispEidTableVniClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispEidTableVniClient) Recv() (*LispEidTableVniDetails, error) {
	m := new(LispEidTableVniDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispLocator(ctx context.Context, in *LispLocatorDump) (RPCService_DumpLispLocatorClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispLocatorClient{stream}
	return x, nil
}

type RPCService_DumpLispLocatorClient interface {
	Recv() (*LispLocatorDetails, error)
}

type serviceClient_DumpLispLocatorClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispLocatorClient) Recv() (*LispLocatorDetails, error) {
	m := new(LispLocatorDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispLocatorSet(ctx context.Context, in *LispLocatorSetDump) (RPCService_DumpLispLocatorSetClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispLocatorSetClient{stream}
	return x, nil
}

type RPCService_DumpLispLocatorSetClient interface {
	Recv() (*LispLocatorSetDetails, error)
}

type serviceClient_DumpLispLocatorSetClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispLocatorSetClient) Recv() (*LispLocatorSetDetails, error) {
	m := new(LispLocatorSetDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispMapResolver(ctx context.Context, in *LispMapResolverDump) (RPCService_DumpLispMapResolverClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispMapResolverClient{stream}
	return x, nil
}

type RPCService_DumpLispMapResolverClient interface {
	Recv() (*LispMapResolverDetails, error)
}

type serviceClient_DumpLispMapResolverClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispMapResolverClient) Recv() (*LispMapResolverDetails, error) {
	m := new(LispMapResolverDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispMapServer(ctx context.Context, in *LispMapServerDump) (RPCService_DumpLispMapServerClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispMapServerClient{stream}
	return x, nil
}

type RPCService_DumpLispMapServerClient interface {
	Recv() (*LispMapServerDetails, error)
}

type serviceClient_DumpLispMapServerClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispMapServerClient) Recv() (*LispMapServerDetails, error) {
	m := new(LispMapServerDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) LispAddDelAdjacency(ctx context.Context, in *LispAddDelAdjacency) (*LispAddDelAdjacencyReply, error) {
	out := new(LispAddDelAdjacencyReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelLocalEid(ctx context.Context, in *LispAddDelLocalEid) (*LispAddDelLocalEidReply, error) {
	out := new(LispAddDelLocalEidReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelLocator(ctx context.Context, in *LispAddDelLocator) (*LispAddDelLocatorReply, error) {
	out := new(LispAddDelLocatorReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelLocatorSet(ctx context.Context, in *LispAddDelLocatorSet) (*LispAddDelLocatorSetReply, error) {
	out := new(LispAddDelLocatorSetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelMapRequestItrRlocs(ctx context.Context, in *LispAddDelMapRequestItrRlocs) (*LispAddDelMapRequestItrRlocsReply, error) {
	out := new(LispAddDelMapRequestItrRlocsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelMapResolver(ctx context.Context, in *LispAddDelMapResolver) (*LispAddDelMapResolverReply, error) {
	out := new(LispAddDelMapResolverReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelMapServer(ctx context.Context, in *LispAddDelMapServer) (*LispAddDelMapServerReply, error) {
	out := new(LispAddDelMapServerReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelRemoteMapping(ctx context.Context, in *LispAddDelRemoteMapping) (*LispAddDelRemoteMappingReply, error) {
	out := new(LispAddDelRemoteMappingReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAdjacenciesGet(ctx context.Context, in *LispAdjacenciesGet) (*LispAdjacenciesGetReply, error) {
	out := new(LispAdjacenciesGetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispEidTableAddDelMap(ctx context.Context, in *LispEidTableAddDelMap) (*LispEidTableAddDelMapReply, error) {
	out := new(LispEidTableAddDelMapReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispEnableDisable(ctx context.Context, in *LispEnableDisable) (*LispEnableDisableReply, error) {
	out := new(LispEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispGetMapRequestItrRlocs(ctx context.Context, in *LispGetMapRequestItrRlocs) (*LispGetMapRequestItrRlocsReply, error) {
	out := new(LispGetMapRequestItrRlocsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispMapRegisterEnableDisable(ctx context.Context, in *LispMapRegisterEnableDisable) (*LispMapRegisterEnableDisableReply, error) {
	out := new(LispMapRegisterEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispMapRequestMode(ctx context.Context, in *LispMapRequestMode) (*LispMapRequestModeReply, error) {
	out := new(LispMapRequestModeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispPitrSetLocatorSet(ctx context.Context, in *LispPitrSetLocatorSet) (*LispPitrSetLocatorSetReply, error) {
	out := new(LispPitrSetLocatorSetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispRlocProbeEnableDisable(ctx context.Context, in *LispRlocProbeEnableDisable) (*LispRlocProbeEnableDisableReply, error) {
	out := new(LispRlocProbeEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispUsePetr(ctx context.Context, in *LispUsePetr) (*LispUsePetrReply, error) {
	out := new(LispUsePetrReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispMapRegisterState(ctx context.Context, in *ShowLispMapRegisterState) (*ShowLispMapRegisterStateReply, error) {
	out := new(ShowLispMapRegisterStateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispMapRequestMode(ctx context.Context, in *ShowLispMapRequestMode) (*ShowLispMapRequestModeReply, error) {
	out := new(ShowLispMapRequestModeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispPitr(ctx context.Context, in *ShowLispPitr) (*ShowLispPitrReply, error) {
	out := new(ShowLispPitrReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispRlocProbeState(ctx context.Context, in *ShowLispRlocProbeState) (*ShowLispRlocProbeStateReply, error) {
	out := new(ShowLispRlocProbeStateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispStatus(ctx context.Context, in *ShowLispStatus) (*ShowLispStatusReply, error) {
	out := new(ShowLispStatusReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispUsePetr(ctx context.Context, in *ShowLispUsePetr) (*ShowLispUsePetrReply, error) {
	out := new(ShowLispUsePetrReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
