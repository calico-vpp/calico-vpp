// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/pipe.api.json

/*
Package pipe is a generated VPP binary API for 'pipe' module.

It consists of:
	  6 messages
	  3 services
*/
package pipe

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "pipe"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xd1b0e995
)

// PipeCreate represents VPP binary API message 'pipe_create'.
type PipeCreate struct {
	IsSpecified  uint8
	UserInstance uint32
}

func (*PipeCreate) GetMessageName() string {
	return "pipe_create"
}
func (*PipeCreate) GetCrcString() string {
	return "db413409"
}
func (*PipeCreate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// PipeCreateReply represents VPP binary API message 'pipe_create_reply'.
type PipeCreateReply struct {
	Retval        int32
	SwIfIndex     uint32
	PipeSwIfIndex []uint32 `struc:"[2]uint32"`
}

func (*PipeCreateReply) GetMessageName() string {
	return "pipe_create_reply"
}
func (*PipeCreateReply) GetCrcString() string {
	return "9f0eef14"
}
func (*PipeCreateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// PipeDelete represents VPP binary API message 'pipe_delete'.
type PipeDelete struct {
	SwIfIndex uint32
}

func (*PipeDelete) GetMessageName() string {
	return "pipe_delete"
}
func (*PipeDelete) GetCrcString() string {
	return "529cb13f"
}
func (*PipeDelete) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// PipeDeleteReply represents VPP binary API message 'pipe_delete_reply'.
type PipeDeleteReply struct {
	Retval int32
}

func (*PipeDeleteReply) GetMessageName() string {
	return "pipe_delete_reply"
}
func (*PipeDeleteReply) GetCrcString() string {
	return "e8d4e804"
}
func (*PipeDeleteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// PipeDetails represents VPP binary API message 'pipe_details'.
type PipeDetails struct {
	SwIfIndex     uint32
	PipeSwIfIndex []uint32 `struc:"[2]uint32"`
	Instance      uint32
}

func (*PipeDetails) GetMessageName() string {
	return "pipe_details"
}
func (*PipeDetails) GetCrcString() string {
	return "91286b09"
}
func (*PipeDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// PipeDump represents VPP binary API message 'pipe_dump'.
type PipeDump struct{}

func (*PipeDump) GetMessageName() string {
	return "pipe_dump"
}
func (*PipeDump) GetCrcString() string {
	return "51077d14"
}
func (*PipeDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func init() {
	api.RegisterMessage((*PipeCreate)(nil), "pipe.PipeCreate")
	api.RegisterMessage((*PipeCreateReply)(nil), "pipe.PipeCreateReply")
	api.RegisterMessage((*PipeDelete)(nil), "pipe.PipeDelete")
	api.RegisterMessage((*PipeDeleteReply)(nil), "pipe.PipeDeleteReply")
	api.RegisterMessage((*PipeDetails)(nil), "pipe.PipeDetails")
	api.RegisterMessage((*PipeDump)(nil), "pipe.PipeDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*PipeCreate)(nil),
		(*PipeCreateReply)(nil),
		(*PipeDelete)(nil),
		(*PipeDeleteReply)(nil),
		(*PipeDetails)(nil),
		(*PipeDump)(nil),
	}
}

// RPCService represents RPC service API for pipe module.
type RPCService interface {
	DumpPipe(ctx context.Context, in *PipeDump) (RPCService_DumpPipeClient, error)
	PipeCreate(ctx context.Context, in *PipeCreate) (*PipeCreateReply, error)
	PipeDelete(ctx context.Context, in *PipeDelete) (*PipeDeleteReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpPipe(ctx context.Context, in *PipeDump) (RPCService_DumpPipeClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpPipeClient{stream}
	return x, nil
}

type RPCService_DumpPipeClient interface {
	Recv() (*PipeDetails, error)
}

type serviceClient_DumpPipeClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpPipeClient) Recv() (*PipeDetails, error) {
	m := new(PipeDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) PipeCreate(ctx context.Context, in *PipeCreate) (*PipeCreateReply, error) {
	out := new(PipeCreateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PipeDelete(ctx context.Context, in *PipeDelete) (*PipeDeleteReply, error) {
	out := new(PipeDeleteReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
