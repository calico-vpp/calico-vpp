// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/igmp.api.json

/*
Package igmp is a generated VPP binary API for 'igmp' module.

It consists of:
	  6 enums
	  5 aliases
	  8 types
	  1 union
	 19 messages
	  9 services
*/
package igmp

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "igmp"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xb11e4893
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint32]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint32{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// FilterMode represents VPP binary API enum 'filter_mode'.
type FilterMode uint32

const (
	EXCLUDE FilterMode = 0
	INCLUDE FilterMode = 1
)

var FilterMode_name = map[uint32]string{
	0: "EXCLUDE",
	1: "INCLUDE",
}

var FilterMode_value = map[string]uint32{
	"EXCLUDE": 0,
	"INCLUDE": 1,
}

func (x FilterMode) String() string {
	s, ok := FilterMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// GroupPrefixType represents VPP binary API enum 'group_prefix_type'.
type GroupPrefixType uint32

const (
	ASM GroupPrefixType = 0
	SSM GroupPrefixType = 1
)

var GroupPrefixType_name = map[uint32]string{
	0: "ASM",
	1: "SSM",
}

var GroupPrefixType_value = map[string]uint32{
	"ASM": 0,
	"SSM": 1,
}

func (x GroupPrefixType) String() string {
	s, ok := GroupPrefixType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint32

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_AH       IPProto = 50
	IP_API_PROTO_ESP      IPProto = 51
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint32]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_AH",
	51:  "IP_API_PROTO_ESP",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint32{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_AH":       50,
	"IP_API_PROTO_ESP":      51,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string {
	return "address"
}

// GroupPrefix represents VPP binary API type 'group_prefix'.
type GroupPrefix struct {
	Type   GroupPrefixType
	Prefix Prefix
}

func (*GroupPrefix) GetTypeName() string {
	return "group_prefix"
}

// IgmpGroup represents VPP binary API type 'igmp_group'.
type IgmpGroup struct {
	Filter    FilterMode
	NSrcs     uint8 `struc:"sizeof=Saddrs"`
	SwIfIndex uint32
	Gaddr     IP4Address
	Saddrs    []IP4Address
}

func (*IgmpGroup) GetTypeName() string {
	return "igmp_group"
}

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string {
	return "ip4_prefix"
}

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string {
	return "ip6_prefix"
}

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string {
	return "mprefix"
}

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string {
	return "prefix"
}

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string {
	return "prefix_matcher"
}

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string {
	return "address_union"
}

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// IgmpClearInterface represents VPP binary API message 'igmp_clear_interface'.
type IgmpClearInterface struct {
	SwIfIndex uint32
}

func (*IgmpClearInterface) GetMessageName() string {
	return "igmp_clear_interface"
}
func (*IgmpClearInterface) GetCrcString() string {
	return "529cb13f"
}
func (*IgmpClearInterface) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpClearInterfaceReply represents VPP binary API message 'igmp_clear_interface_reply'.
type IgmpClearInterfaceReply struct {
	Retval int32
}

func (*IgmpClearInterfaceReply) GetMessageName() string {
	return "igmp_clear_interface_reply"
}
func (*IgmpClearInterfaceReply) GetCrcString() string {
	return "e8d4e804"
}
func (*IgmpClearInterfaceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IgmpDetails represents VPP binary API message 'igmp_details'.
type IgmpDetails struct {
	SwIfIndex uint32
	Saddr     IP4Address
	Gaddr     IP4Address
}

func (*IgmpDetails) GetMessageName() string {
	return "igmp_details"
}
func (*IgmpDetails) GetCrcString() string {
	return "206ac38d"
}
func (*IgmpDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IgmpDump represents VPP binary API message 'igmp_dump'.
type IgmpDump struct {
	SwIfIndex uint32
}

func (*IgmpDump) GetMessageName() string {
	return "igmp_dump"
}
func (*IgmpDump) GetCrcString() string {
	return "529cb13f"
}
func (*IgmpDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpEnableDisable represents VPP binary API message 'igmp_enable_disable'.
type IgmpEnableDisable struct {
	Enable    uint8
	Mode      uint8
	SwIfIndex uint32
}

func (*IgmpEnableDisable) GetMessageName() string {
	return "igmp_enable_disable"
}
func (*IgmpEnableDisable) GetCrcString() string {
	return "5bd2a570"
}
func (*IgmpEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpEnableDisableReply represents VPP binary API message 'igmp_enable_disable_reply'.
type IgmpEnableDisableReply struct {
	Retval int32
}

func (*IgmpEnableDisableReply) GetMessageName() string {
	return "igmp_enable_disable_reply"
}
func (*IgmpEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*IgmpEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IgmpEvent represents VPP binary API message 'igmp_event'.
type IgmpEvent struct {
	SwIfIndex uint32
	Filter    FilterMode
	Saddr     IP4Address
	Gaddr     IP4Address
}

func (*IgmpEvent) GetMessageName() string {
	return "igmp_event"
}
func (*IgmpEvent) GetCrcString() string {
	return "af15421c"
}
func (*IgmpEvent) GetMessageType() api.MessageType {
	return api.OtherMessage
}

// IgmpGroupPrefixDetails represents VPP binary API message 'igmp_group_prefix_details'.
type IgmpGroupPrefixDetails struct {
	Gp GroupPrefix
}

func (*IgmpGroupPrefixDetails) GetMessageName() string {
	return "igmp_group_prefix_details"
}
func (*IgmpGroupPrefixDetails) GetCrcString() string {
	return "c3b3c526"
}
func (*IgmpGroupPrefixDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IgmpGroupPrefixDump represents VPP binary API message 'igmp_group_prefix_dump'.
type IgmpGroupPrefixDump struct{}

func (*IgmpGroupPrefixDump) GetMessageName() string {
	return "igmp_group_prefix_dump"
}
func (*IgmpGroupPrefixDump) GetCrcString() string {
	return "51077d14"
}
func (*IgmpGroupPrefixDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpGroupPrefixSet represents VPP binary API message 'igmp_group_prefix_set'.
type IgmpGroupPrefixSet struct {
	Gp GroupPrefix
}

func (*IgmpGroupPrefixSet) GetMessageName() string {
	return "igmp_group_prefix_set"
}
func (*IgmpGroupPrefixSet) GetCrcString() string {
	return "d4f20ac5"
}
func (*IgmpGroupPrefixSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpGroupPrefixSetReply represents VPP binary API message 'igmp_group_prefix_set_reply'.
type IgmpGroupPrefixSetReply struct {
	Retval int32
}

func (*IgmpGroupPrefixSetReply) GetMessageName() string {
	return "igmp_group_prefix_set_reply"
}
func (*IgmpGroupPrefixSetReply) GetCrcString() string {
	return "e8d4e804"
}
func (*IgmpGroupPrefixSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IgmpListen represents VPP binary API message 'igmp_listen'.
type IgmpListen struct {
	Group IgmpGroup
}

func (*IgmpListen) GetMessageName() string {
	return "igmp_listen"
}
func (*IgmpListen) GetCrcString() string {
	return "66077afb"
}
func (*IgmpListen) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpListenReply represents VPP binary API message 'igmp_listen_reply'.
type IgmpListenReply struct {
	Retval int32
}

func (*IgmpListenReply) GetMessageName() string {
	return "igmp_listen_reply"
}
func (*IgmpListenReply) GetCrcString() string {
	return "e8d4e804"
}
func (*IgmpListenReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IgmpProxyDeviceAddDel represents VPP binary API message 'igmp_proxy_device_add_del'.
type IgmpProxyDeviceAddDel struct {
	Add       uint8
	VrfID     uint32
	SwIfIndex uint32
}

func (*IgmpProxyDeviceAddDel) GetMessageName() string {
	return "igmp_proxy_device_add_del"
}
func (*IgmpProxyDeviceAddDel) GetCrcString() string {
	return "f753aab3"
}
func (*IgmpProxyDeviceAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpProxyDeviceAddDelInterface represents VPP binary API message 'igmp_proxy_device_add_del_interface'.
type IgmpProxyDeviceAddDelInterface struct {
	Add       uint8
	VrfID     uint32
	SwIfIndex uint32
}

func (*IgmpProxyDeviceAddDelInterface) GetMessageName() string {
	return "igmp_proxy_device_add_del_interface"
}
func (*IgmpProxyDeviceAddDelInterface) GetCrcString() string {
	return "f753aab3"
}
func (*IgmpProxyDeviceAddDelInterface) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IgmpProxyDeviceAddDelInterfaceReply represents VPP binary API message 'igmp_proxy_device_add_del_interface_reply'.
type IgmpProxyDeviceAddDelInterfaceReply struct {
	Retval int32
}

func (*IgmpProxyDeviceAddDelInterfaceReply) GetMessageName() string {
	return "igmp_proxy_device_add_del_interface_reply"
}
func (*IgmpProxyDeviceAddDelInterfaceReply) GetCrcString() string {
	return "e8d4e804"
}
func (*IgmpProxyDeviceAddDelInterfaceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IgmpProxyDeviceAddDelReply represents VPP binary API message 'igmp_proxy_device_add_del_reply'.
type IgmpProxyDeviceAddDelReply struct {
	Retval int32
}

func (*IgmpProxyDeviceAddDelReply) GetMessageName() string {
	return "igmp_proxy_device_add_del_reply"
}
func (*IgmpProxyDeviceAddDelReply) GetCrcString() string {
	return "e8d4e804"
}
func (*IgmpProxyDeviceAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// WantIgmpEvents represents VPP binary API message 'want_igmp_events'.
type WantIgmpEvents struct {
	Enable uint32
	PID    uint32
}

func (*WantIgmpEvents) GetMessageName() string {
	return "want_igmp_events"
}
func (*WantIgmpEvents) GetCrcString() string {
	return "cfaccc1f"
}
func (*WantIgmpEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// WantIgmpEventsReply represents VPP binary API message 'want_igmp_events_reply'.
type WantIgmpEventsReply struct {
	Retval int32
}

func (*WantIgmpEventsReply) GetMessageName() string {
	return "want_igmp_events_reply"
}
func (*WantIgmpEventsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*WantIgmpEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*IgmpClearInterface)(nil), "igmp.IgmpClearInterface")
	api.RegisterMessage((*IgmpClearInterfaceReply)(nil), "igmp.IgmpClearInterfaceReply")
	api.RegisterMessage((*IgmpDetails)(nil), "igmp.IgmpDetails")
	api.RegisterMessage((*IgmpDump)(nil), "igmp.IgmpDump")
	api.RegisterMessage((*IgmpEnableDisable)(nil), "igmp.IgmpEnableDisable")
	api.RegisterMessage((*IgmpEnableDisableReply)(nil), "igmp.IgmpEnableDisableReply")
	api.RegisterMessage((*IgmpEvent)(nil), "igmp.IgmpEvent")
	api.RegisterMessage((*IgmpGroupPrefixDetails)(nil), "igmp.IgmpGroupPrefixDetails")
	api.RegisterMessage((*IgmpGroupPrefixDump)(nil), "igmp.IgmpGroupPrefixDump")
	api.RegisterMessage((*IgmpGroupPrefixSet)(nil), "igmp.IgmpGroupPrefixSet")
	api.RegisterMessage((*IgmpGroupPrefixSetReply)(nil), "igmp.IgmpGroupPrefixSetReply")
	api.RegisterMessage((*IgmpListen)(nil), "igmp.IgmpListen")
	api.RegisterMessage((*IgmpListenReply)(nil), "igmp.IgmpListenReply")
	api.RegisterMessage((*IgmpProxyDeviceAddDel)(nil), "igmp.IgmpProxyDeviceAddDel")
	api.RegisterMessage((*IgmpProxyDeviceAddDelInterface)(nil), "igmp.IgmpProxyDeviceAddDelInterface")
	api.RegisterMessage((*IgmpProxyDeviceAddDelInterfaceReply)(nil), "igmp.IgmpProxyDeviceAddDelInterfaceReply")
	api.RegisterMessage((*IgmpProxyDeviceAddDelReply)(nil), "igmp.IgmpProxyDeviceAddDelReply")
	api.RegisterMessage((*WantIgmpEvents)(nil), "igmp.WantIgmpEvents")
	api.RegisterMessage((*WantIgmpEventsReply)(nil), "igmp.WantIgmpEventsReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*IgmpClearInterface)(nil),
		(*IgmpClearInterfaceReply)(nil),
		(*IgmpDetails)(nil),
		(*IgmpDump)(nil),
		(*IgmpEnableDisable)(nil),
		(*IgmpEnableDisableReply)(nil),
		(*IgmpEvent)(nil),
		(*IgmpGroupPrefixDetails)(nil),
		(*IgmpGroupPrefixDump)(nil),
		(*IgmpGroupPrefixSet)(nil),
		(*IgmpGroupPrefixSetReply)(nil),
		(*IgmpListen)(nil),
		(*IgmpListenReply)(nil),
		(*IgmpProxyDeviceAddDel)(nil),
		(*IgmpProxyDeviceAddDelInterface)(nil),
		(*IgmpProxyDeviceAddDelInterfaceReply)(nil),
		(*IgmpProxyDeviceAddDelReply)(nil),
		(*WantIgmpEvents)(nil),
		(*WantIgmpEventsReply)(nil),
	}
}

// RPCService represents RPC service API for igmp module.
type RPCService interface {
	DumpIgmp(ctx context.Context, in *IgmpDump) (RPCService_DumpIgmpClient, error)
	DumpIgmpGroupPrefix(ctx context.Context, in *IgmpGroupPrefixDump) (RPCService_DumpIgmpGroupPrefixClient, error)
	IgmpClearInterface(ctx context.Context, in *IgmpClearInterface) (*IgmpClearInterfaceReply, error)
	IgmpEnableDisable(ctx context.Context, in *IgmpEnableDisable) (*IgmpEnableDisableReply, error)
	IgmpGroupPrefixSet(ctx context.Context, in *IgmpGroupPrefixSet) (*IgmpGroupPrefixSetReply, error)
	IgmpListen(ctx context.Context, in *IgmpListen) (*IgmpListenReply, error)
	IgmpProxyDeviceAddDel(ctx context.Context, in *IgmpProxyDeviceAddDel) (*IgmpProxyDeviceAddDelReply, error)
	IgmpProxyDeviceAddDelInterface(ctx context.Context, in *IgmpProxyDeviceAddDelInterface) (*IgmpProxyDeviceAddDelInterfaceReply, error)
	WantIgmpEvents(ctx context.Context, in *WantIgmpEvents) (*WantIgmpEventsReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpIgmp(ctx context.Context, in *IgmpDump) (RPCService_DumpIgmpClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIgmpClient{stream}
	return x, nil
}

type RPCService_DumpIgmpClient interface {
	Recv() (*IgmpDetails, error)
}

type serviceClient_DumpIgmpClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIgmpClient) Recv() (*IgmpDetails, error) {
	m := new(IgmpDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIgmpGroupPrefix(ctx context.Context, in *IgmpGroupPrefixDump) (RPCService_DumpIgmpGroupPrefixClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIgmpGroupPrefixClient{stream}
	return x, nil
}

type RPCService_DumpIgmpGroupPrefixClient interface {
	Recv() (*IgmpGroupPrefixDetails, error)
}

type serviceClient_DumpIgmpGroupPrefixClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIgmpGroupPrefixClient) Recv() (*IgmpGroupPrefixDetails, error) {
	m := new(IgmpGroupPrefixDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) IgmpClearInterface(ctx context.Context, in *IgmpClearInterface) (*IgmpClearInterfaceReply, error) {
	out := new(IgmpClearInterfaceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IgmpEnableDisable(ctx context.Context, in *IgmpEnableDisable) (*IgmpEnableDisableReply, error) {
	out := new(IgmpEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IgmpGroupPrefixSet(ctx context.Context, in *IgmpGroupPrefixSet) (*IgmpGroupPrefixSetReply, error) {
	out := new(IgmpGroupPrefixSetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IgmpListen(ctx context.Context, in *IgmpListen) (*IgmpListenReply, error) {
	out := new(IgmpListenReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IgmpProxyDeviceAddDel(ctx context.Context, in *IgmpProxyDeviceAddDel) (*IgmpProxyDeviceAddDelReply, error) {
	out := new(IgmpProxyDeviceAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IgmpProxyDeviceAddDelInterface(ctx context.Context, in *IgmpProxyDeviceAddDelInterface) (*IgmpProxyDeviceAddDelInterfaceReply, error) {
	out := new(IgmpProxyDeviceAddDelInterfaceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WantIgmpEvents(ctx context.Context, in *WantIgmpEvents) (*WantIgmpEventsReply, error) {
	out := new(WantIgmpEventsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
