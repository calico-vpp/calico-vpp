// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/lacp.api.json

/*
Package lacp is a generated VPP binary API for 'lacp' module.

It consists of:
	  2 messages
	  1 service
*/
package lacp

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "lacp"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xec776e02
)

// SwInterfaceLacpDetails represents VPP binary API message 'sw_interface_lacp_details'.
type SwInterfaceLacpDetails struct {
	SwIfIndex             uint32
	InterfaceName         []byte `struc:"[64]byte"`
	RxState               uint32
	TxState               uint32
	MuxState              uint32
	PtxState              uint32
	BondInterfaceName     []byte `struc:"[64]byte"`
	ActorSystemPriority   uint16
	ActorSystem           []byte `struc:"[6]byte"`
	ActorKey              uint16
	ActorPortPriority     uint16
	ActorPortNumber       uint16
	ActorState            uint8
	PartnerSystemPriority uint16
	PartnerSystem         []byte `struc:"[6]byte"`
	PartnerKey            uint16
	PartnerPortPriority   uint16
	PartnerPortNumber     uint16
	PartnerState          uint8
}

func (*SwInterfaceLacpDetails) GetMessageName() string {
	return "sw_interface_lacp_details"
}
func (*SwInterfaceLacpDetails) GetCrcString() string {
	return "8a14b95e"
}
func (*SwInterfaceLacpDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceLacpDump represents VPP binary API message 'sw_interface_lacp_dump'.
type SwInterfaceLacpDump struct{}

func (*SwInterfaceLacpDump) GetMessageName() string {
	return "sw_interface_lacp_dump"
}
func (*SwInterfaceLacpDump) GetCrcString() string {
	return "51077d14"
}
func (*SwInterfaceLacpDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func init() {
	api.RegisterMessage((*SwInterfaceLacpDetails)(nil), "lacp.SwInterfaceLacpDetails")
	api.RegisterMessage((*SwInterfaceLacpDump)(nil), "lacp.SwInterfaceLacpDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SwInterfaceLacpDetails)(nil),
		(*SwInterfaceLacpDump)(nil),
	}
}

// RPCService represents RPC service API for lacp module.
type RPCService interface {
	DumpSwInterfaceLacp(ctx context.Context, in *SwInterfaceLacpDump) (RPCService_DumpSwInterfaceLacpClient, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpSwInterfaceLacp(ctx context.Context, in *SwInterfaceLacpDump) (RPCService_DumpSwInterfaceLacpClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSwInterfaceLacpClient{stream}
	return x, nil
}

type RPCService_DumpSwInterfaceLacpClient interface {
	Recv() (*SwInterfaceLacpDetails, error)
}

type serviceClient_DumpSwInterfaceLacpClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSwInterfaceLacpClient) Recv() (*SwInterfaceLacpDetails, error) {
	m := new(SwInterfaceLacpDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
