// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/udp_ping.api.json

/*
Package udp_ping is a generated VPP binary API for 'udp_ping' module.

It consists of:
	  4 messages
	  2 services
*/
package udp_ping

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "udp_ping"
	// APIVersion is the API version of this module.
	APIVersion = "2.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xc8855f73
)

// UDPPingAddDel represents VPP binary API message 'udp_ping_add_del'.
type UDPPingAddDel struct {
	SrcIPAddress []byte `struc:"[16]byte"`
	DstIPAddress []byte `struc:"[16]byte"`
	StartSrcPort uint16
	EndSrcPort   uint16
	StartDstPort uint16
	EndDstPort   uint16
	Interval     uint16
	IsIPv4       uint8
	Dis          uint8
	FaultDet     uint8
	Reserve      []byte `struc:"[3]byte"`
}

func (*UDPPingAddDel) GetMessageName() string {
	return "udp_ping_add_del"
}
func (*UDPPingAddDel) GetCrcString() string {
	return "559fcc01"
}
func (*UDPPingAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// UDPPingAddDelReply represents VPP binary API message 'udp_ping_add_del_reply'.
type UDPPingAddDelReply struct {
	Retval int32
}

func (*UDPPingAddDelReply) GetMessageName() string {
	return "udp_ping_add_del_reply"
}
func (*UDPPingAddDelReply) GetCrcString() string {
	return "e8d4e804"
}
func (*UDPPingAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// UDPPingExport represents VPP binary API message 'udp_ping_export'.
type UDPPingExport struct {
	Enable uint32
}

func (*UDPPingExport) GetMessageName() string {
	return "udp_ping_export"
}
func (*UDPPingExport) GetCrcString() string {
	return "b142b369"
}
func (*UDPPingExport) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// UDPPingExportReply represents VPP binary API message 'udp_ping_export_reply'.
type UDPPingExportReply struct {
	Retval int32
}

func (*UDPPingExportReply) GetMessageName() string {
	return "udp_ping_export_reply"
}
func (*UDPPingExportReply) GetCrcString() string {
	return "e8d4e804"
}
func (*UDPPingExportReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*UDPPingAddDel)(nil), "udp_ping.UDPPingAddDel")
	api.RegisterMessage((*UDPPingAddDelReply)(nil), "udp_ping.UDPPingAddDelReply")
	api.RegisterMessage((*UDPPingExport)(nil), "udp_ping.UDPPingExport")
	api.RegisterMessage((*UDPPingExportReply)(nil), "udp_ping.UDPPingExportReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*UDPPingAddDel)(nil),
		(*UDPPingAddDelReply)(nil),
		(*UDPPingExport)(nil),
		(*UDPPingExportReply)(nil),
	}
}

// RPCService represents RPC service API for udp_ping module.
type RPCService interface {
	UDPPingAddDel(ctx context.Context, in *UDPPingAddDel) (*UDPPingAddDelReply, error)
	UDPPingExport(ctx context.Context, in *UDPPingExport) (*UDPPingExportReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) UDPPingAddDel(ctx context.Context, in *UDPPingAddDel) (*UDPPingAddDelReply, error) {
	out := new(UDPPingAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UDPPingExport(ctx context.Context, in *UDPPingExport) (*UDPPingExportReply, error) {
	out := new(UDPPingExportReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
