// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/cop.api.json

/*
Package cop is a generated VPP binary API for 'cop' module.

It consists of:
	  4 messages
	  2 services
*/
package cop

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "cop"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x40512488
)

// CopInterfaceEnableDisable represents VPP binary API message 'cop_interface_enable_disable'.
type CopInterfaceEnableDisable struct {
	SwIfIndex     uint32
	EnableDisable uint8
}

func (*CopInterfaceEnableDisable) GetMessageName() string {
	return "cop_interface_enable_disable"
}
func (*CopInterfaceEnableDisable) GetCrcString() string {
	return "69d24598"
}
func (*CopInterfaceEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// CopInterfaceEnableDisableReply represents VPP binary API message 'cop_interface_enable_disable_reply'.
type CopInterfaceEnableDisableReply struct {
	Retval int32
}

func (*CopInterfaceEnableDisableReply) GetMessageName() string {
	return "cop_interface_enable_disable_reply"
}
func (*CopInterfaceEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*CopInterfaceEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// CopWhitelistEnableDisable represents VPP binary API message 'cop_whitelist_enable_disable'.
type CopWhitelistEnableDisable struct {
	SwIfIndex  uint32
	FibID      uint32
	IP4        uint8
	IP6        uint8
	DefaultCop uint8
}

func (*CopWhitelistEnableDisable) GetMessageName() string {
	return "cop_whitelist_enable_disable"
}
func (*CopWhitelistEnableDisable) GetCrcString() string {
	return "8bb8f6dc"
}
func (*CopWhitelistEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// CopWhitelistEnableDisableReply represents VPP binary API message 'cop_whitelist_enable_disable_reply'.
type CopWhitelistEnableDisableReply struct {
	Retval int32
}

func (*CopWhitelistEnableDisableReply) GetMessageName() string {
	return "cop_whitelist_enable_disable_reply"
}
func (*CopWhitelistEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*CopWhitelistEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*CopInterfaceEnableDisable)(nil), "cop.CopInterfaceEnableDisable")
	api.RegisterMessage((*CopInterfaceEnableDisableReply)(nil), "cop.CopInterfaceEnableDisableReply")
	api.RegisterMessage((*CopWhitelistEnableDisable)(nil), "cop.CopWhitelistEnableDisable")
	api.RegisterMessage((*CopWhitelistEnableDisableReply)(nil), "cop.CopWhitelistEnableDisableReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*CopInterfaceEnableDisable)(nil),
		(*CopInterfaceEnableDisableReply)(nil),
		(*CopWhitelistEnableDisable)(nil),
		(*CopWhitelistEnableDisableReply)(nil),
	}
}

// RPCService represents RPC service API for cop module.
type RPCService interface {
	CopInterfaceEnableDisable(ctx context.Context, in *CopInterfaceEnableDisable) (*CopInterfaceEnableDisableReply, error)
	CopWhitelistEnableDisable(ctx context.Context, in *CopWhitelistEnableDisable) (*CopWhitelistEnableDisableReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) CopInterfaceEnableDisable(ctx context.Context, in *CopInterfaceEnableDisable) (*CopInterfaceEnableDisableReply, error) {
	out := new(CopInterfaceEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CopWhitelistEnableDisable(ctx context.Context, in *CopWhitelistEnableDisable) (*CopWhitelistEnableDisableReply, error) {
	out := new(CopWhitelistEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
