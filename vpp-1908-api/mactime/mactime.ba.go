// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/mactime.api.json

/*
Package mactime is a generated VPP binary API for 'mactime' module.

It consists of:
	  1 type
	  4 messages
	  2 services
*/
package mactime

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "mactime"
	// APIVersion is the API version of this module.
	APIVersion = "1.1.1"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x4e7c8bc8
)

// TimeRange represents VPP binary API type 'time_range'.
type TimeRange struct {
	Start float64
	End   float64
}

func (*TimeRange) GetTypeName() string {
	return "time_range"
}

// MactimeAddDelRange represents VPP binary API message 'mactime_add_del_range'.
type MactimeAddDelRange struct {
	IsAdd      uint8
	Drop       uint8
	Allow      uint8
	AllowQuota uint8
	NoUDP10001 uint8
	DataQuota  uint64
	MacAddress []byte `struc:"[6]byte"`
	DeviceName []byte `struc:"[64]byte"`
	Count      uint32 `struc:"sizeof=Ranges"`
	Ranges     []TimeRange
}

func (*MactimeAddDelRange) GetMessageName() string {
	return "mactime_add_del_range"
}
func (*MactimeAddDelRange) GetCrcString() string {
	return "eda8702f"
}
func (*MactimeAddDelRange) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// MactimeAddDelRangeReply represents VPP binary API message 'mactime_add_del_range_reply'.
type MactimeAddDelRangeReply struct {
	Retval int32
}

func (*MactimeAddDelRangeReply) GetMessageName() string {
	return "mactime_add_del_range_reply"
}
func (*MactimeAddDelRangeReply) GetCrcString() string {
	return "e8d4e804"
}
func (*MactimeAddDelRangeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// MactimeEnableDisable represents VPP binary API message 'mactime_enable_disable'.
type MactimeEnableDisable struct {
	EnableDisable uint8
	SwIfIndex     uint32
}

func (*MactimeEnableDisable) GetMessageName() string {
	return "mactime_enable_disable"
}
func (*MactimeEnableDisable) GetCrcString() string {
	return "57298519"
}
func (*MactimeEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// MactimeEnableDisableReply represents VPP binary API message 'mactime_enable_disable_reply'.
type MactimeEnableDisableReply struct {
	Retval int32
}

func (*MactimeEnableDisableReply) GetMessageName() string {
	return "mactime_enable_disable_reply"
}
func (*MactimeEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*MactimeEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*MactimeAddDelRange)(nil), "mactime.MactimeAddDelRange")
	api.RegisterMessage((*MactimeAddDelRangeReply)(nil), "mactime.MactimeAddDelRangeReply")
	api.RegisterMessage((*MactimeEnableDisable)(nil), "mactime.MactimeEnableDisable")
	api.RegisterMessage((*MactimeEnableDisableReply)(nil), "mactime.MactimeEnableDisableReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*MactimeAddDelRange)(nil),
		(*MactimeAddDelRangeReply)(nil),
		(*MactimeEnableDisable)(nil),
		(*MactimeEnableDisableReply)(nil),
	}
}

// RPCService represents RPC service API for mactime module.
type RPCService interface {
	MactimeAddDelRange(ctx context.Context, in *MactimeAddDelRange) (*MactimeAddDelRangeReply, error)
	MactimeEnableDisable(ctx context.Context, in *MactimeEnableDisable) (*MactimeEnableDisableReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) MactimeAddDelRange(ctx context.Context, in *MactimeAddDelRange) (*MactimeAddDelRangeReply, error) {
	out := new(MactimeAddDelRangeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) MactimeEnableDisable(ctx context.Context, in *MactimeEnableDisable) (*MactimeEnableDisableReply, error) {
	out := new(MactimeEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
